package main

import (
	"bufio"
	"fmt"
	. "github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
	"gopkg.in/yaml.v2"
	"io"
	"io/ioutil"
	"os"
	"strings"
)

type MessageMetadata struct {
	ContextOnConnect string `yaml:"context-on-connect"`
	Messages         []struct {
		Name   string
		Type   int
		Action bool
		Fields []struct {
			Name     string
			JsonName string `yaml:"json-name"`
			Type     string
		}
		Contexts []string
	}
}

func main() {

	messageMetadata := MessageMetadata{}

	data, err := ioutil.ReadFile("./scripts/messages.yaml")
	if err != nil {
		panic(err)
	}
	err = yaml.Unmarshal(data, &messageMetadata)
	if err != nil {
		panic(err)
	}

	GenerateMessageTypes(messageMetadata)
	GenerateActions(messageMetadata)
	GenerateGodotMessageTypes(messageMetadata)
}

func GenerateMessageTypes(messageMetadata MessageMetadata) {
	f := NewFile("protocol")
	warningCommentToFile(f)
	for _, message := range messageMetadata.Messages {
		fields := make([]Code, 0)

		for _, field := range message.Fields {
			jsonName := field.JsonName

			if len(jsonName) == 0 {
				jsonName = strcase.ToSnake(field.Name)
			}

			fields = append(
				fields,
				Id(field.Name).Id(field.Type).Tag(map[string]string{"json": jsonName}),
			)
		}

		f.Type().Id(message.Name + "Message").Struct(fields...)
		f.Empty()
		f.Func().Params(Id("m").Id(message.Name + "Message")).Id("GetTypeId").
			Params().Id("MessageType").Block(Return(Lit(message.Type)))
	}
	f.Empty()
	registerStatements := make([]Code, 0)
	for _, messageType := range messageMetadata.Messages {
		registerStatements = append(
			registerStatements,
			Id("definition.Register").Call(Id(messageType.Name+"Message{}")),
		)
	}
	f.Func().Id("RegisterAllMessages").Params(Id("definition").Id("*Definition")).Block(registerStatements...)

	file, err := os.OpenFile("./internal/net/tcp/protocol/messagetypes.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0664)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	w := bufio.NewWriter(file)
	_, _ = fmt.Fprintf(w, "%#v", f)
	_ = w.Flush()
}

func GenerateActions(messageMetadata MessageMetadata) {
	f := NewFile("actions")
	warningCommentToFile(f)

	allContextsMap := make(map[string]struct{}, 0)

	for _, message := range messageMetadata.Messages {
		if !message.Action {
			continue
		}
		for _, ctx := range message.Contexts {
			allContextsMap[ctx] = struct{}{}
		}
	}

	allContexts := make([]string, 0)
	allContexts = append(allContexts, messageMetadata.ContextOnConnect)

	for ctx := range allContextsMap {
		if ctx != "ALL" && ctx != messageMetadata.ContextOnConnect {
			allContexts = append(allContexts, ctx)
		}
	}

	allContextStatements := make([]Code, 0)
	for i, ctx := range allContexts {
		allContextStatements = append(allContextStatements,
			Id(ctx).Op("=").Qual("kiv_ups_server/internal/masterserver/interfaces", "PlayerContext").Params(Lit(i)))
	}

	f.Const().Defs(allContextStatements...)

	for _, message := range messageMetadata.Messages {
		if !message.Action {
			continue
		}

		f.Type().Id(message.Name + "Action").Struct()

		f.Empty()

		var contexts []string

		if len(message.Contexts) == 1 && message.Contexts[0] == "ALL" {
			contexts = allContexts
		} else {
			contexts = message.Contexts
		}

		contextStatements := make([]Code, 0)

		for _, ctx := range contexts {
			contextStatements = append(contextStatements, Id(ctx))
		}

		f.Func().Params(Id("a").Id(message.Name+"Action")).Id("GetPlayerContexts").
			Params().Index().Qual("kiv_ups_server/internal/masterserver/interfaces", "PlayerContext").
			Block(Return(Index().Qual("kiv_ups_server/internal/masterserver/interfaces", "PlayerContext").Values(contextStatements...)))
		f.Empty()
		f.Func().Params(Id("a").Id(message.Name+"Action")).Id("GetMessage").
			Params().Qual("kiv_ups_server/internal/net/tcp/protocol", "Message").
			Block(Return(Qual("kiv_ups_server/internal/net/tcp/protocol", message.Name+"Message{}")))
	}
	f.Empty()
	registerStatements := make([]Code, 0)
	for _, messageType := range messageMetadata.Messages {
		if !messageType.Action {
			continue
		}
		registerStatements = append(
			registerStatements,
			Id("actionDefinition.Register").Call(Id(messageType.Name+"Action{}")),
		)
	}
	f.Func().Id("RegisterAllActions").Params(Id("actionDefinition").Id("*ActionDefinition")).Block(registerStatements...)

	file, err := os.OpenFile("./internal/masterserver/actions/defs.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0664)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	w := bufio.NewWriter(file)
	_, _ = fmt.Fprintf(w, "%#v", f)
	_ = w.Flush()
}

func warningComment() string {
	return "###############################################################\n" +
		"# This code is generated by `go run ./scripts/generate.go`.   #\n" +
		"# If you want to generate the contents of this file, go to    #\n" +
		"# the server directory and run the command.                   #\n" +
		"#                                                             #\n" +
		"# DON'T TOUCH IT DIRECTLY! YOU WILL SUFFER!                   #\n" +
		"###############################################################\n"
}

func warningCommentToFile(f *File) {
	f.Comment(warningComment())
}

func warningCommentToWriter(w io.Writer) {
	_, _ = fmt.Fprintln(w, warningComment())
}

func GenerateGodotMessageTypes(messageMetadata MessageMetadata) {
	file, err := os.OpenFile("../client/networking/MessageTypes.gd", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0664)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	w := bufio.NewWriter(file)

	warningCommentToWriter(w)

	_, _ = fmt.Fprintln(w, "extends Node\n")
	for _, message := range messageMetadata.Messages {
		_, _ = fmt.Fprintf(w, "const %s = %d\n",
			strings.ToUpper(strcase.ToSnake(message.Name)), message.Type)
	}
	_ = w.Flush()
}
